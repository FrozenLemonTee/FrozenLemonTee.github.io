[{"date":"2333-01-01T04:00:00.000Z","url":"/2333/01/01/%E5%AD%A6%E4%B9%A0%E5%B0%8F%E6%8A%84_intro/","categories":[["学习小抄","/categories/%E5%AD%A6%E4%B9%A0%E5%B0%8F%E6%8A%84/"]],"content":" 这里是秘密花园的自习角！听着蝉鸣、沐浴着阳光，多么好的睡……咳咳学习的地方呀， 无论身处何处都不要停下学习的脚步哦~ 这里会记录学习上一些知识点和内容总结~"},{"date":"2333-01-01T04:00:00.000Z","url":"/2333/01/01/%E6%9E%81%E5%AE%A2%E4%B8%96%E7%95%8C_intro/","categories":[["极客世界","/categories/%E6%9E%81%E5%AE%A2%E4%B8%96%E7%95%8C/"]],"content":" 欢迎来到秘密花园的极客世界！花园最深处最隐蔽的一隅。这里的位置也许并不是那么的醒目， 但幽静的环境也恰恰满足了许久深思熟虑的要求，最酷的IDEA都在这里诞生！ 这里展示的是我的各种技术向的原创文章、原创作品哦~"},{"date":"2333-01-01T04:00:00.000Z","url":"/2333/01/01/%E7%94%9F%E6%B4%BB%E6%97%A5%E5%B8%B8_intro/","categories":[["生活日常","/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E5%B8%B8/"]],"content":" 欢迎！这里是秘密花园的茶话室！品着浓郁的咖啡，迎面飘来花朵的芳香，与珍视的好友攀谈， 遥望着夕阳落下，一天就这么过去了吗？ 这里会分享生活中值得被记录的点点滴滴。"},{"date":"2333-01-01T04:00:00.000Z","url":"/2333/01/01/%E9%98%85%E8%AF%BB%E6%9C%89%E6%84%9F_intro/","categories":[["阅读有感","/categories/%E9%98%85%E8%AF%BB%E6%9C%89%E6%84%9F/"]],"content":" 这是秘密花园的藏书阁！一排排书架整齐的排列着，书架上摆着一本本厚重的书， 翻开稍沾尘埃的封面，品读着一段段娓娓道来的故事—————— 这里时不时会出现一些读书的感想与见解。"},{"date":"2021-03-01T12:52:32.000Z","url":"/2021/03/01/%E6%97%A5%E5%B8%B820210301-00/","tags":[["音游","/tags/%E9%9F%B3%E6%B8%B8/"],["喵斯快跑","/tags/%E5%96%B5%E6%96%AF%E5%BF%AB%E8%B7%91/"]],"categories":[["生活日常","/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E5%B8%B8/"]],"content":"今日复健成果，11级又一首上90%，难得遇一次233 "},{"title":"科技想要什么（1）：外熵崛起","date":"2021-02-25T05:55:13.000Z","url":"/2021/02/25/%E7%A7%91%E6%8A%80%E6%83%B3%E8%A6%81%E4%BB%80%E4%B9%88%EF%BC%881%EF%BC%89%EF%BC%9A%E5%A4%96%E7%86%B5%E5%B4%9B%E8%B5%B7/","tags":[["科技想要什么","/tags/%E7%A7%91%E6%8A%80%E6%83%B3%E8%A6%81%E4%BB%80%E4%B9%88/"],["凯文凯利","/tags/%E5%87%AF%E6%96%87%E5%87%AF%E5%88%A9/"]],"categories":[["阅读有感","/categories/%E9%98%85%E8%AF%BB%E6%9C%89%E6%84%9F/"]],"content":" ” 科技体是世界上最强大的力量。我们倾向于认为人类的大脑是世界上最强大的力量（然而我们应该记得这种说法从何而来）,但科技体已经赶上了它聪明的“父母”。我们心智的力量只能通过刻意的自反省(self-reflection)才能略微增强,而对于思想的思考只能让我们增加一丁点的智慧。然而,科技体的力量却可以通过对其自身的转化性质的反思,而使自身的力量无限增加。 “ ——《科技想要什么》 凯文凯利 科技体是类似于生命体的存在，它们之间有许多相似的特点，其中一个主要的特点便是两者皆具有的维持自身有序和稳定的能力。在热力学中，系统的混乱程度被称为熵，与此相反的是作者称为外熵的概念，它是衡量一个系统有序的程度。在作者看来，它不仅可以衡量一个热力学系统的有序程度，还可以用在生物体以及科技体上。两者的外熵相对于广阔宇宙间的大部分物质与能量来说，要显得高不少。正是这种高外熵，决定了生物体和科技体在宇宙中显得如此的与众不同。"},{"title":"PAT乙级-1025:通过图和列表实现","date":"2021-02-22T15:08:29.000Z","url":"/2021/02/22/PAT%E4%B9%99%E7%BA%A7-1025-%E9%80%9A%E8%BF%87%E5%9B%BE%E5%92%8C%E5%88%97%E8%A1%A8%E5%AE%9E%E7%8E%B0/","tags":[["算法","/tags/%E7%AE%97%E6%B3%95/"],["PAT","/tags/PAT/"],["Python","/tags/Python/"],["C++","/tags/C/"],["图","/tags/%E5%9B%BE/"],["链表","/tags/%E9%93%BE%E8%A1%A8/"]],"categories":[["极客世界","/categories/%E6%9E%81%E5%AE%A2%E4%B8%96%E7%95%8C/"]],"content":"题目详情给定一个常数 K 以及一个单链表 L，请编写程序将 L 中每 K 个结点反转。例如：给定 L 为 1→2→3→4→5→6，K 为 3，则输出应该为 3→2→1→6→5→4；如果 K 为 4，则输出应该为 4→3→2→1→5→6，即最后不到 K 个元素不反转。 输入格式： 每个输入包含 1 个测试用例。每个测试用例第 1 行给出第 1 个结点的地址、结点总个数正整数 N (≤105)、以及正整数 K (≤N)，即要求反转的子链结点的个数。结点的地址是 5 位非负整数，NULL 地址用 −1 表示。 接下来有 N 行，每行格式为： 其中 Address 是结点地址，Data 是该结点保存的整数数据，Next 是下一结点的地址。 输出格式： 对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。 输入样例： 输出样例： 作者：CHEN, Yue 单位：浙江大学 代码长度限制：16 KB 时间限制：400 ms 内存限制：64 MB 分析本题考查对链表的查找与修改以及图、顺序表的使用。 输入的数据为乱序，因此如何按节点地址的顺序快速找到对应的节点并构建成完整的初始链表是本题的一大难点。这里可以利用图（字典），将每个节点的当前地址作为键，映射到作为对应值的节点，指针找到当前节点，将其放入列表中，更新指针指向下一个节点的地址，直至找不到下一个节点为止。 之后k个为一组进行节点的反转，注意边界条件是索引index满足不超过末尾元素索引值index &lt; lst.size()同时保证最后不到k个节点不反转，即lst.size() - index &gt;= k. 注意最后输出前将每个节点的.next修改为下一个节点的.address. C++实现 结果AC Python代码较C++简单，如下 实现 结果一开始我是用Python写的这题，但是其中有一个输入超时，因此后面改用C++. "},{"title":"大话计算机：第1章电控开关","date":"2021-02-20T10:25:19.000Z","url":"/2021/02/20/%E5%A4%A7%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%EF%BC%9A%E7%AC%AC1%E7%AB%A0%E7%94%B5%E6%8E%A7%E5%BC%80%E5%85%B3/","tags":[["大话计算机","/tags/%E5%A4%A7%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA/"],["计算机组成原理","/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"],["电路原理","/tags/%E7%94%B5%E8%B7%AF%E5%8E%9F%E7%90%86/"]],"categories":[["学习小抄","/categories/%E5%AD%A6%E4%B9%A0%E5%B0%8F%E6%8A%84/"]],"content":"1.计算机只“认识”的是0和1两种状态，而不是数值 2.精简指令集计算机(RISC:Reduced Instruction Set Computing)用更少的逻辑符号但需要大量符号组合完成更多的任务（类似英文），而复杂指令集计算机(CISC:Complex Instruction Set Computing)用更少的逻辑符号但每个符号表示的含义更复杂完成更多的任务（类似中文） 3.异或门 异或门由或门、与非门和与门构成 4.与门、非门组合成与非门： 定义 not(A and B) == A nand B 5.与非门、或门相与组合成异或门： 定义 (A nand B) and (A or B) == A xor B 即 (A nand B) and (A or B) == (not(A and B)) and (A or B) 类似可得同或门： not(A xor B) == A xnor B 即： not((not(A and B)) and (A or B)) == (A and B) and (not(A or B)) 6.半加器 不接受低位进位信号的加法器 本位和的逻辑——异或门： S0 = A xor B 进位的逻辑——与门： C1 = A and B 7.全加器 在半加器基础上接受低位进位信号 蓝框部分为全加器 A1和B1的半加和S1’与低位进位C0半加，半加的和S1即为本位和，溢出位C1’’与A1、B1半加的溢出位C1’相或，结果为本位的进位CO1 设第i级加位（i = 0, 1, 2, …）的本位和为Si，低位进位为CIi(Input)，本位进位为COi(Output)，由6可知： Si = (Ai xor Bi) xor CIi COi = ((Ai xor Bi) and CIi) or (Ai and Bi) 一般的，当i = 0时，CI0 = 0（即在最低位没有更低位的进位输入） 1位全加器可以组成4位全加器，进一步也可以组成8位全加器 8.电磁场建立的时间是光速，但开关动作的响应有时延，知道开关的时延可以估算出整个电路响应所花时间 9.布尔运算定律 A + A * B = A * （1+B）=A * 1 = A A + A’ * B = A + B 10.加法并行进位 由7的Si与SOi表达式循环代入，对于每一个CIi，其值都只与C0相关而与低位进位信号无关 C0 = C0 C1 = (A1 and B1) or (A1 xor B1) and C0 C2 = (A2 and B2) or (A2 xor B2) and ((A1 and B1) or (A1 xor B1) and C0) C3 = (A3 and B3) or (A3 xor B3) and ((A2 and B2) or (A2 xor B2) and ((A1 and B1) or (A1 xor B1) and C0)) …… 因此串行加法可以变为并行加法降低时延 11.RS(Reset-Set)触发器 由两个或非门G1、G2构成 R端：Reset 重置端，S端：Set 设置端 Q端为输出端，Q’端输出与Q端信号相反，互为镜像 当S = 0，R = 1 时， Q = 0， Q’ = 1 当S = 1，R = 0 时， Q = 1， Q’ = 0 当S = 0，R = 0 时， Q = 1， Q’ = 0 （Q端记忆了之前S = 1的状态信号） 当S = 1，R = 1 时，状态不确定，不允许 12.D(Data)触发器 通过两个与门，当L = 0时可屏蔽R、S端输入 并且可以保存Q = 0的状态 若 L = 1： 当S = 0，R = 1 时，R’ = 1, S’ = 0， 因此 Q = 0， Q’ = 1（存0） 当S = 1，R = 0 时，R’ = 0, S’ = 1， 因此 Q = 1， Q’ = 0（存1） 若 L = 0： 由于与门，R’ = 0, S’ = 0 对于Q = 1， Q’ = 0 状态，状态保持Q = 1， Q’ = 0 对于Q = 0， Q’ = 1 状态，由镜像易知与上面状态相反 由于R 、 S输入相反，通过一个非门可将R、S端简化为DI（Input）端，L端为锁存端，隐去Q’端，原Q端即为DO（Output）端 13.边沿触发器 将两个D触发器串联，前后两个L输入保证相反，即为边沿型触发器 工作原理示意图如下图： 左右闸门分别代表L1、L2锁存信号，永远保持相反，放下为0，抬起为1. 不同颜色代表不同次序的信号，由上图知L = L1’ = L2，由下图知只有L （L2）由0变为1（上升沿）时信号D才能最终透传至Q，因此称为边沿触发. 习惯上Q做输出端，Q’与D端一致，因此相连.波形图如下： 14.时钟电路与计数 将边沿触发器串联，输出与输入首尾相连，利用边沿触发器延迟输出信号的半频效应可以实现时钟电路. 每串联一级，时延扩大一倍，如图： 时延效应也可以用于计数: 锁存信号作输入时，每震荡变化一次，相应输出就会变化. 15.真值表与逻辑表达式、逻辑电路的转化 规则：将真值表内所有输出为1的行相或，每行内所有输入相与，其中为1的输入保持原输入，为0的输入表达式中取负. 如上图，A、B、C、D为输入，E、F、G、H为输出. E = A’B’C’D’ + A’B’C’D + A’B’CD’ + A’BC’D’ F = A’B’C’D’ + A’B’C’D + A’B’CD’ G = A’B’C’D’ + A’B’C’D H = A’B’C’D’ 化简后即可得到结果，再将结果表示为逻辑电路. 16.逻辑1、0与高阻态 逻辑0与1：此时电路中有电流，逻辑0为低电平，逻辑1为高电平，两者一般会有界限 高阻态：电路中没有电流，电阻无限大（开路） 通过逻辑0/1控制电路的阻态 17.信号选择器 每路控制信号分别与一路数据信号构成一个与门，通过控制信号选择相应数据信号输出，输出端汇合用或门保证信号不被干扰、覆盖 对于一个七段数码管，一个数据信号对应一根灯管的亮与灭 输入端电路固定储存显示每种数字对应的数据信号组合 通过一个七位输入——八选一选择器进行信号组的选择，每个数据选择控制线的信号有七个分支，对应一组信号的七个位，总共八根线，对应八组 18.矩阵电路CROSSBAR（只读存储器 ROM） 通过矩阵电路选择信号，可以减少线路数量，扩充位数更加方便，如下图： 位数扩充前 位数扩充后 19.选路器 选路器用于多对一和一对多的选路，相比CROSSBAR电路更简单。一对多选路器称为DEMUX，多对一选路器称为MUX。 如图分别为一对二选路器和二对一选路器，选择信号分别为0或1时分别导通两端与门，从而实现选路。 DEMUX和MUX 一对四、四对一类似。 利用选路器还可以实现CROSSBAR，如下图的二对二XBAR： 20.缓冲队列和读写指针 为了解决XBAR某个输出端可能同时接受两个输入信号而导致冲突的问题，可以采用若干个串联的锁存器组成缓冲队列。同时还需要专门的锁存器存储队列尾部的位置，这种锁存器称为指针，利用译码器将锁存信息转成DEMUX的控制信号 FIFO队列四端口交换矩阵部分逻辑"},{"date":"2021-02-17T14:46:39.000Z","url":"/2021/02/17/%E6%97%A5%E5%B8%B820210217-00/","tags":[["git","/tags/git/"],["github","/tags/github/"]],"categories":[["生活日常","/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E5%B8%B8/"]],"content":"今天想着琢磨怎么自己弄一个git自动化脚本出来方便部署博客的渲染文件和存源文件，于是随便写了写，结果部署博客渲染文件并且传主分支时一不小心把本地源文件分支给盖成以前的了，于是赶紧从远程仓库fetch下来。。。本以为这样就结束了，结果在看远程仓库的源文件分支时一不小心又删掉了，赶紧本地仓库恢复上去。。。以后再也不什么都不清楚就随便乱弄了qwq这就是棺材里仰卧起坐吗"},{"date":"2021-02-16T02:05:13.000Z","url":"/2021/02/16/%E6%97%A5%E5%B8%B820210216-00/","tags":[["喵赛克","/tags/%E5%96%B5%E8%B5%9B%E5%85%8B/"],["音游","/tags/%E9%9F%B3%E6%B8%B8/"]],"categories":[["生活日常","/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E5%B8%B8/"]],"content":"尾杀打崩了居然还刷新记录，这应该是这首准度最高的一次了233 "},{"title":"Leetcode142-环形链表II：对双指针算法的严格数学证明","date":"2021-02-15T10:48:31.000Z","url":"/2021/02/15/Leetcode142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II%EF%BC%9A%E5%AF%B9%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%95%B0%E5%AD%A6%E8%AF%81%E6%98%8E/","tags":[["Leetcode","/tags/Leetcode/"],["算法","/tags/%E7%AE%97%E6%B3%95/"],["双指针","/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"]],"categories":[["极客世界","/categories/%E6%9E%81%E5%AE%A2%E4%B8%96%E7%95%8C/"]],"content":"原文引自我的力扣题解：针对Floyd 快慢指针算法阶段二的严格数学证明 双指针解法过程我们使用两个指针，fast 与 slow。它们起始都位于链表的头部。随后，slow 指针每次向后移动一个位置，而 fast指针向后移动两个位置。如果链表中存在环，则 fast指针最终将再次与slow 指针在环中相遇。 证明从链表头部出发的步数与最后处于的节点编号的函数关系式对于一个带环的链表，若在环外（包括入环起始位置的节点）的节点数为F，环内节点数目为C，由链表起始位置出发的步数为x，最终指向的节点编号为M，当x&lt;F时，有M = x; 当x&gt;=F时，有F+(x-F)%C，如下图所示。 步骤在第一阶段中，慢指针走了x=n步，快指针走了x=2n步.显然n&gt;=F，则M(n)=F+(n-F)%C,M(2n)=F+(2n-F)%C.此时快慢指针相遇，则M(n)=M(2n).即F+(n-F)%C = F+(2n-F)%C即(n-F)%C = (2n-F)%C则((2n-F) - (n-F))%C = 0.求得 n%C=0 (*) 阶段二指针一从链表头部出发，指针二从阶段一相遇处出发，两指针相遇且为入环起始位置，有：M(n+F) = M(F) = F 成立.M(F) = F 显然成立.对于M(n+F) = F，有：M(n+F) = F+(n+F - F)%C = F + n%C将(*)代入，M(n+F) = F + n%C = F + 0 = F. 所以阶段二的结论是正确的，证毕."},{"title":"PAT乙级-1045：动态规划实现","date":"2021-02-15T09:07:52.000Z","url":"/2021/02/15/PAT%E4%B9%99%E7%BA%A7-1045%EF%BC%9A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%AE%9E%E7%8E%B0/","tags":[["算法","/tags/%E7%AE%97%E6%B3%95/"],["PAT","/tags/PAT/"],["Python","/tags/Python/"],["C","/tags/C/"],["动态规划","/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"]],"categories":[["极客世界","/categories/%E6%9E%81%E5%AE%A2%E4%B8%96%E7%95%8C/"]],"content":"题目详情著名的快速排序算法里有一个经典的划分过程：我们通常采用某种方法取一个元素作为主元，通过交换，把比主元小的元素放到它的左边，比主元大的元素放到它的右边。 给定划分后的 N 个互不相同的正整数的排列，请问有多少个元素可能是划分前选取的主元？ 例如给定 $N = 5$, 排列是1、3、2、4、5。则： 1 的左边没有元素，右边的元素都比它大，所以它可能是主元； 尽管 3 的左边元素都比它小，但其右边的 2 比它小，所以它不能是主元； 尽管 2 的右边元素都比它大，但其左边的 3 比它大，所以它不能是主元； 类似原因，4 和 5 都可能是主元。 因此，有 3 个元素可能是主元。 输入格式： 输入在第 1 行中给出一个正整数 N（≤105）； 第 2 行是空格分隔的 N 个不同的正整数，每个数不超过 109。 输出格式： 在第 1 行中输出有可能是主元的元素个数；在第 2 行中按递增顺序输出这些元素，其间以 1 个空格分隔，行首尾不得有多余空格。 输入样例： 输出样例： 作者：CAO, Peng 单位：Google 代码长度限制：16 KB 时间限制：200 ms 内存限制：64 MB 分析由题目知，主元的定义是：在一个列表中，若一个元素左侧的所有的元素都比它小，右侧的所有元素都比它大，则该元素为一个主元。 因此，若知道了某个元素a[i]左侧所有元素的最大值left和右侧所有元素的最小值right，只要满足a[i] &gt; left &amp;&amp; a[i] &lt; right即可符合主元的定义。 为了储存每个元素对应的left和right，需要开辟一个二维数组dp[len][2]。其中len为题目所给出的正整数列表的长度，每列对应的是列表相应元素，每行分别对应该元素对应的left和right，求解顺序是按正序递推出每一个left，按逆序 递推出每一个right 。 因此时间复杂度为线性O(2n)= O(n)，空间复杂度为线性O(2n)= O(n)。 边界条件：从左往右遍历时，i = 0时对应的left为dp[0][0] = -Infinity；从右往左遍历时，i = len - 1时对应的right为dp[len - 1][1] = Infinity。 状态转移方程：从左往右遍历时，对每个元素的索引i，有dp[i][0] = max&#123;a[i], dp[i - 1][0]&#125;；从右往左遍历时，对每个元素的索引i，有dp[len - 1 - i][1] = min&#123;a[i], dp[len - i][1]&#125;。 代码实现Python C 通过情况结果为Python代码有测试点超时。 C所有测试点AC，如下： C"},{"title":"利用Ansys进行斜齿轮副接触分析","date":"2021-02-15T08:23:17.000Z","url":"/2021/02/15/%E5%88%A9%E7%94%A8Ansys%E8%BF%9B%E8%A1%8C%E6%96%9C%E9%BD%BF%E8%BD%AE%E5%89%AF%E6%8E%A5%E8%A7%A6%E5%88%86%E6%9E%90/","tags":[["Ansys","/tags/Ansys/"],["工程仿真","/tags/%E5%B7%A5%E7%A8%8B%E4%BB%BF%E7%9C%9F/"],["APDL","/tags/APDL/"]],"categories":[["极客世界","/categories/%E6%9E%81%E5%AE%A2%E4%B8%96%E7%95%8C/"]],"content":" 建模思路和注意事项1.先画出半个齿的轮廓线，通过镜像生成一个齿，再利用柱坐标系旋转阵列复制出完整的轮廓线 2.半个齿的渐开线（这里做了简化，用了二次曲线替代真正的渐开线）部分利用柱坐标系，通过模拟极坐标方程轨迹法描出关键点，再用样条线连接 3.斜齿轮需要用齿廓样条线，使用VDRAG（拖拽）命令将齿面沿生成好的齿廓样条线拖拽成体 4.由于孔与键槽与齿面垂直，所以不应在做齿面的时候就先做，而是拖拽成体后再做 5.斜齿轮分为左旋与右旋，所以应当先复制齿面，然后两个齿轮沿两个相反的方向画出样条线 6.由于用VDRAG拖拽成体，齿轮体没有划分网格，所以可以先用PLANE182划分齿面，再通过VSWEEP（扫掠）用SOLID185划分整个齿轮体 APDL命令流实现 结果展示 建模与边界条件设置 等效应力云图 接触滑移距离云图"},{"title":"利用Ansys进行斜拉桥的受力分析","date":"2021-02-15T04:29:37.000Z","url":"/2021/02/15/%E5%88%A9%E7%94%A8Ansys%E8%BF%9B%E8%A1%8C%E6%96%9C%E6%8B%89%E6%A1%A5%E7%9A%84%E5%8F%97%E5%8A%9B%E5%88%86%E6%9E%90/","tags":[["Ansys","/tags/Ansys/"],["工程仿真","/tags/%E5%B7%A5%E7%A8%8B%E4%BB%BF%E7%9C%9F/"],["APDL","/tags/APDL/"]],"categories":[["极客世界","/categories/%E6%9E%81%E5%AE%A2%E4%B8%96%E7%95%8C/"]],"content":" 建模思路和注意事项1.桥立柱和拉索都使用BEAM188单元，这样连接处不需要特殊处理，只需用NUMMRG命令进行节点的聚合即可，但是注意要分别设置两种不同的截面类型（截面形状和尺寸） 2.桥面使用SHELL181单元，同时要设置其截面类型（主要是厚度） 3.桥墩使用SOLID185单元，因为是三维实体。同时需要注意实体单元和梁单元自由度不同（梁6个、实体3个），不能直接连接，需要用到接触对处理两者连接部分，这也是本算例的难点所在。两者为面面接触（当然本算例中使用点面接触得到的结果也是一样的），目标单元在SHELL181单元上，目标单元采用TARGE170单元，接触单元采用CONTA175单元，参考Ansys官方文档-单元库。连接算法采用MPC算法，这样避免使用默认算法进行大量迭代引起求解效率下降，也避免了加入接触刚度引起精度的下降 4.大桥算例为非线性问题，在求解器中修改为大位移静力学分析 5.使桥面分块，便于利用坐标定位，用循环建立桥上立柱和拉索，也方便桥墩拉伸成体和MPC连接建立接触对 APDL命令流实现 步骤截图 建立桥面 桥面划分网格 建立桥墩 建立立柱 建立拉索 建立接触对 设置边界条件"}]