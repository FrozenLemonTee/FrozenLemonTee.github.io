[{"date":"2333-01-01T04:00:00.000Z","url":"/2333/01/01/%E5%AD%A6%E4%B9%A0%E5%B0%8F%E6%8A%84_intro/","categories":[["学习小抄","/categories/%E5%AD%A6%E4%B9%A0%E5%B0%8F%E6%8A%84/"]],"content":" 这里是秘密花园的自习角！听着蝉鸣、沐浴着阳光，多么好的睡……咳咳学习的地方呀， 无论身处何处都不要停下学习的脚步哦~ 这里会记录学习上一些知识点和内容总结~"},{"date":"2333-01-01T04:00:00.000Z","url":"/2333/01/01/%E6%9E%81%E5%AE%A2%E4%B8%96%E7%95%8C_intro/","categories":[["极客世界","/categories/%E6%9E%81%E5%AE%A2%E4%B8%96%E7%95%8C/"]],"content":" 欢迎来到秘密花园的极客世界！花园最深处最隐蔽的一隅。这里的位置也许并不是那么的醒目， 但幽静的环境也恰恰满足了许久深思熟虑的要求，最酷的IDEA都在这里诞生！ 这里展示的是我的各种技术向的原创文章、原创作品哦~"},{"date":"2333-01-01T04:00:00.000Z","url":"/2333/01/01/%E7%94%9F%E6%B4%BB%E6%97%A5%E5%B8%B8_intro/","categories":[["生活日常","/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E5%B8%B8/"]],"content":" 欢迎！这里是秘密花园的茶话室！品着浓郁的咖啡，迎面飘来花朵的芳香，与珍视的好友攀谈， 遥望着夕阳落下，一天就这么过去了吗？ 这里会分享生活中值得被记录的点点滴滴。"},{"date":"2333-01-01T04:00:00.000Z","url":"/2333/01/01/%E9%98%85%E8%AF%BB%E6%9C%89%E6%84%9F_intro/","categories":[["阅读有感","/categories/%E9%98%85%E8%AF%BB%E6%9C%89%E6%84%9F/"]],"content":" 这是秘密花园的藏书阁！一排排书架整齐的排列着，书架上摆着一本本厚重的书， 翻开稍沾尘埃的封面，品读着一段段娓娓道来的故事—————— 这里时不时会出现一些读书的感想与见解。"},{"date":"2021-02-17T14:46:39.000Z","url":"/2021/02/17/%E6%97%A5%E5%B8%B820210217-00/","tags":[["git","/tags/git/"],["github","/tags/github/"]],"categories":[["生活日常","/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E5%B8%B8/"]],"content":"今天想着琢磨怎么自己弄一个git自动化脚本出来方便部署博客的渲染文件和存源文件，于是随便写了写，结果部署博客渲染文件并且传主分支时一不小心把本地源文件分支给盖成以前的了，于是赶紧从远程仓库fetch下来。。。本以为这样就结束了，结果在看远程仓库的源文件分支时一不小心又删掉了，赶紧本地仓库恢复上去。。。以后再也不什么都不清楚就随便乱弄了qwq这就是棺材里仰卧起坐吗"},{"date":"2021-02-16T02:05:13.000Z","url":"/2021/02/16/%E6%97%A5%E5%B8%B820210216-00/","tags":[["喵赛克","/tags/%E5%96%B5%E8%B5%9B%E5%85%8B/"],["音游","/tags/%E9%9F%B3%E6%B8%B8/"]],"categories":[["生活日常","/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E5%B8%B8/"]],"content":"尾杀打崩了居然还刷新记录，这应该是这首准度最高的一次了233 "},{"title":"Leetcode142-环形链表II：对双指针算法的严格数学证明","date":"2021-02-15T10:48:31.000Z","url":"/2021/02/15/Leetcode142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II%EF%BC%9A%E5%AF%B9%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%95%B0%E5%AD%A6%E8%AF%81%E6%98%8E/","tags":[["Leetcode","/tags/Leetcode/"],["算法","/tags/%E7%AE%97%E6%B3%95/"],["双指针","/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"]],"categories":[["极客世界","/categories/%E6%9E%81%E5%AE%A2%E4%B8%96%E7%95%8C/"]],"content":"原文引自我的力扣题解：针对Floyd 快慢指针算法阶段二的严格数学证明 双指针解法过程我们使用两个指针，fast 与 slow。它们起始都位于链表的头部。随后，slow 指针每次向后移动一个位置，而 fast指针向后移动两个位置。如果链表中存在环，则 fast指针最终将再次与slow 指针在环中相遇。 证明从链表头部出发的步数与最后处于的节点编号的函数关系式对于一个带环的链表，若在环外（包括入环起始位置的节点）的节点数为F，环内节点数目为C，由链表起始位置出发的步数为x，最终指向的节点编号为M，当x&lt;F时，有M = x; 当x&gt;=F时，有F+(x-F)%C，如下图所示。 步骤在第一阶段中，慢指针走了x=n步，快指针走了x=2n步.显然n&gt;=F，则M(n)=F+(n-F)%C,M(2n)=F+(2n-F)%C.此时快慢指针相遇，则M(n)=M(2n).即F+(n-F)%C = F+(2n-F)%C即(n-F)%C = (2n-F)%C则((2n-F) - (n-F))%C = 0.求得 n%C=0 (*) 阶段二指针一从链表头部出发，指针二从阶段一相遇处出发，两指针相遇且为入环起始位置，有：M(n+F) = M(F) = F 成立.M(F) = F 显然成立.对于M(n+F) = F，有：M(n+F) = F+(n+F - F)%C = F + n%C将(*)代入，M(n+F) = F + n%C = F + 0 = F. 所以阶段二的结论是正确的，证毕."},{"title":"PAT乙级-1045：动态规划实现","date":"2021-02-15T09:07:52.000Z","url":"/2021/02/15/PAT%E4%B9%99%E7%BA%A7-1045%EF%BC%9A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%AE%9E%E7%8E%B0/","tags":[["算法","/tags/%E7%AE%97%E6%B3%95/"],["PAT","/tags/PAT/"],["Python","/tags/Python/"],["C","/tags/C/"],["动态规划","/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"]],"categories":[["极客世界","/categories/%E6%9E%81%E5%AE%A2%E4%B8%96%E7%95%8C/"]],"content":"题目详情著名的快速排序算法里有一个经典的划分过程：我们通常采用某种方法取一个元素作为主元，通过交换，把比主元小的元素放到它的左边，比主元大的元素放到它的右边。 给定划分后的 N 个互不相同的正整数的排列，请问有多少个元素可能是划分前选取的主元？ 例如给定 $N = 5$, 排列是1、3、2、4、5。则： 1 的左边没有元素，右边的元素都比它大，所以它可能是主元； 尽管 3 的左边元素都比它小，但其右边的 2 比它小，所以它不能是主元； 尽管 2 的右边元素都比它大，但其左边的 3 比它大，所以它不能是主元； 类似原因，4 和 5 都可能是主元。 因此，有 3 个元素可能是主元。 输入格式： 输入在第 1 行中给出一个正整数 N（≤105）； 第 2 行是空格分隔的 N 个不同的正整数，每个数不超过 109。 输出格式： 在第 1 行中输出有可能是主元的元素个数；在第 2 行中按递增顺序输出这些元素，其间以 1 个空格分隔，行首尾不得有多余空格。 输入样例： 输出样例： 作者：CAO, Peng 单位：Google 代码长度限制：16 KB 时间限制：200 ms 内存限制：64 MB 分析由题目知，主元的定义是：在一个列表中，若一个元素左侧的所有的元素都比它小，右侧的所有元素都比它大，则该元素为一个主元。 因此，若知道了某个元素a[i]左侧所有元素的最大值left和右侧所有元素的最小值right，只要满足a[i] &gt; left &amp;&amp; a[i] &lt; right即可符合主元的定义。 为了储存每个元素对应的left和right，需要开辟一个二维数组dp[len][2]。其中len为题目所给出的正整数列表的长度，每列对应的是列表相应元素，每行分别对应该元素对应的left和right，求解顺序是按正序递推出每一个left，按逆序 递推出每一个right 。 因此时间复杂度为线性O(2n)= O(n)，空间复杂度为线性O(2n)= O(n)。 边界条件：从左往右遍历时，i = 0时对应的left为dp[0][0] = -Infinity；从右往左遍历时，i = len - 1时对应的right为dp[len - 1][1] = Infinity。 状态转移方程：从左往右遍历时，对每个元素的索引i，有dp[i][0] = max&#123;a[i], dp[i - 1][0]&#125;；从右往左遍历时，对每个元素的索引i，有dp[len - 1 - i][1] = min&#123;a[i], dp[len - i][1]&#125;。 代码实现Python C 通过情况结果为Python代码有测试点超时。 C所有测试点AC，如下： C"},{"title":"利用Ansys进行斜齿轮副接触分析","date":"2021-02-15T08:23:17.000Z","url":"/2021/02/15/%E5%88%A9%E7%94%A8Ansys%E8%BF%9B%E8%A1%8C%E6%96%9C%E9%BD%BF%E8%BD%AE%E5%89%AF%E6%8E%A5%E8%A7%A6%E5%88%86%E6%9E%90/","tags":[["Ansys","/tags/Ansys/"],["工程仿真","/tags/%E5%B7%A5%E7%A8%8B%E4%BB%BF%E7%9C%9F/"],["APDL","/tags/APDL/"]],"categories":[["极客世界","/categories/%E6%9E%81%E5%AE%A2%E4%B8%96%E7%95%8C/"]],"content":" 建模思路和注意事项1.先画出半个齿的轮廓线，通过镜像生成一个齿，再利用柱坐标系旋转阵列复制出完整的轮廓线 2.半个齿的渐开线（这里做了简化，用了二次曲线替代真正的渐开线）部分利用柱坐标系，通过模拟极坐标方程轨迹法描出关键点，再用样条线连接 3.斜齿轮需要用齿廓样条线，使用VDRAG（拖拽）命令将齿面沿生成好的齿廓样条线拖拽成体 4.由于孔与键槽与齿面垂直，所以不应在做齿面的时候就先做，而是拖拽成体后再做 5.斜齿轮分为左旋与右旋，所以应当先复制齿面，然后两个齿轮沿两个相反的方向画出样条线 6.由于用VDRAG拖拽成体，齿轮体没有划分网格，所以可以先用PLANE182划分齿面，再通过VSWEEP（扫掠）用SOLID185划分整个齿轮体 APDL命令流实现 结果展示 建模与边界条件设置 等效应力云图 接触滑移距离云图"},{"title":"利用Ansys进行斜拉桥的受力分析","date":"2021-02-15T04:29:37.000Z","url":"/2021/02/15/%E5%88%A9%E7%94%A8Ansys%E8%BF%9B%E8%A1%8C%E6%96%9C%E6%8B%89%E6%A1%A5%E7%9A%84%E5%8F%97%E5%8A%9B%E5%88%86%E6%9E%90/","tags":[["Ansys","/tags/Ansys/"],["工程仿真","/tags/%E5%B7%A5%E7%A8%8B%E4%BB%BF%E7%9C%9F/"],["APDL","/tags/APDL/"]],"categories":[["极客世界","/categories/%E6%9E%81%E5%AE%A2%E4%B8%96%E7%95%8C/"]],"content":" 建模思路和注意事项1.桥立柱和拉索都使用BEAM188单元，这样连接处不需要特殊处理，只需用NUMMRG命令进行节点的聚合即可，但是注意要分别设置两种不同的截面类型（截面形状和尺寸） 2.桥面使用SHELL181单元，同时要设置其截面类型（主要是厚度） 3.桥墩使用SOLID185单元，因为是三维实体。同时需要注意实体单元和梁单元自由度不同（梁6个、实体3个），不能直接连接，需要用到接触对处理两者连接部分，这也是本算例的难点所在。两者为面面接触（当然本算例中使用点面接触得到的结果也是一样的），目标单元在SHELL181单元上，目标单元采用TARGE170单元，接触单元采用CONTA175单元，参考Ansys官方文档-单元库。连接算法采用MPC算法，这样避免使用默认算法进行大量迭代引起求解效率下降，也避免了加入接触刚度引起精度的下降 4.大桥算例为非线性问题，在求解器中修改为大位移静力学分析 5.使桥面分块，便于利用坐标定位，用循环建立桥上立柱和拉索，也方便桥墩拉伸成体和MPC连接建立接触对 APDL命令流实现 步骤截图 建立桥面 桥面划分网格 建立桥墩 建立立柱 建立拉索 建立接触对 设置边界条件"},{"title":"网站正在施工中！~~","date":"2021-02-14T04:15:16.000Z","url":"/2021/02/14/%E7%BD%91%E7%AB%99%E6%AD%A3%E5%9C%A8%E6%96%BD%E5%B7%A5%E4%B8%AD%EF%BC%81/","tags":[["其他","/tags/%E5%85%B6%E4%BB%96/"]],"categories":[["其他","/categories/%E5%85%B6%E4%BB%96/"]],"content":"稍安勿躁~~~~ "}]